{"version":3,"sources":["App.js","utils/dispatcher.js","constants/elevatorEvents.js","models/elevator.js","constants/elevatorState.js","constants/direction.js","models/usageSimulator.js","hooks/useForceUpdate.js","hooks/useAsyncState.js","components/TimeController.js","components/TestSettingsController.js","components/FloorDisplay.js","components/FloorBank.js","components/ElevatorDisplay.js","components/AboutDisplay.js","index.js"],"names":["provideDispatcher","eventTypes","listeners","reduce","dispatcher","eventType","on","listener","push","filter","current","dispatch","_len","arguments","length","params","Array","_key","forEach","apply","ELEVATOR_EVENTS","provideElevator","floorCount","elevatorState","currentFloor","currentDirection","destinations","requests","openTimeout","moveTime","openTime","canChangeDirection","filterFloorsAhead","floor","destinationsAhead","map","request","shouldOpen","destinationsAtCurrentFloor","requestsAtCurrentFloor","requestsAlsoMatchingCurrentDirection","destination","direction","isOpen","moveToNextFloor","allowDoorsToClose","_provideDispatcher","addDestination","destinationsChange","Object","toConsumableArray","requestElevator","requestsChange","passTime","requestFilter","doorsOpen","doorsChange","openDoors","floorChanges","timePasses","setOpenTimeout","value","reset","provideUsageSimulator","elevator","floors","unsubscribeFromTimePasses","spawn","randomInteger","min","max","Math","round","random","randomFloor","slice","origin","destinationEntered","cancelListeners","cancelResetListener","cancelDoorsOpenListener","elevatorDirection","toggle","undefined","useForceUpdate","_useState","useState","update","slicedToArray","states","useAsyncState","initial","forceUpdate","id","state","AUTOPLAY_INTERVALS","TimeController","_ref","_useAsyncState","_useAsyncState2","asyncAutoplay","setAutoplay","_useAsyncState3","_useAsyncState4","asyncAutoplaySpeed","setAutoplaySpeed","useEffect","startAutoplay","changePlaySpeed","setTimeout","applyAutoplayTimestep","react_default","a","createElement","className","children","onClick","cx","TestSettingsController","spawnPassenger","toggleUsageSimulator","usageSimulatorIsEnabled","FloorDisplay","isCurrentFloor","elevatorDoorsOpen","isUpRequested","find","isDownRequested","isTopFloor","isBottomFloor","disabled","FloorBank","components_FloorDisplay","key","ElevatorDisplay","isDestination","AboutDisplay","i","usageSimulator","App","_useState2","setCurrentFloor","_useState3","_useState4","setDestinations","_useState5","_useState6","setRequests","_useState7","_useState8","setDoorsOpen","_useState9","_useState10","setusageSimulatorIsEnabled","cancellers","canceller","components_TimeController","components_TestSettingsController","components_FloorBank","components_ElevatorDisplay","components_AboutDisplay","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c9c8813e.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nimport provideElevator from './models/elevator';\nimport provideUsageSimulator from './models/usageSimulator';\n\nimport TimeController from './components/TimeController'\nimport TestSettingsController from './components/TestSettingsController'\nimport FloorBank from './components/FloorBank';\nimport ElevatorDisplay from './components/ElevatorDisplay';\nimport AboutDisplay from './components/AboutDisplay';\n\nconst FLOOR_COUNT = 10;\n\nconst elevator = provideElevator(FLOOR_COUNT);\n\nconst floors = [];\nfor (let i = 1; i <= FLOOR_COUNT; ++i) floors.push(i);\n\nconst usageSimulator = provideUsageSimulator(elevator, floors);\n\nfunction App() {\n\n\tconst [currentFloor, setCurrentFloor] = useState(0);\n\tconst [destinations, setDestinations] = useState([]);\n\tconst [requests, setRequests] = useState([]);\n\tconst [doorsOpen, setDoorsOpen] = useState(false);\n\tconst [usageSimulatorIsEnabled, setusageSimulatorIsEnabled] = useState(false);\n\n\tuseEffect(() => {\n\n\t\tconst cancellers = [];\n\n\t\tcancellers.push(elevator.on.floorChanges(setCurrentFloor));\n\t\tcancellers.push(elevator.on.destinationsChange(setDestinations));\n\t\tcancellers.push(elevator.on.requestsChange(setRequests));\n\t\tcancellers.push(elevator.on.doorsChange(setDoorsOpen));\n\n\t\tcancellers.push(\n\t\t\televator.on.reset((currentFloor, destinations, requests, doorsOpen) => {\n\t\t\t\tsetCurrentFloor(currentFloor);\n\t\t\t\tsetDestinations(destinations);\n\t\t\t\tsetRequests(requests);\n\t\t\t\tsetDoorsOpen(doorsOpen);\n\t\t\t})\n\t\t);\n\n\t\tcancellers.push(usageSimulator.on.toggle(setusageSimulatorIsEnabled));\n\n\t\televator.reset();\n\t\tusageSimulator.toggle();\n\n\t\treturn () => cancellers.forEach(canceller => canceller())\n\n\t},[]);\n\n\tconst {\n\t\taddDestination,\n\t\trequestElevator,\n\t\treset,\n\t\tpassTime,\n\t\tsetOpenTimeout\n\t} = elevator;\n\n\tconst {\n\t\tspawn: spawnPassenger,\n\t\ttoggle: toggleUsageSimulator,\n\t} = usageSimulator;\n\n\treturn (\n\t\t<div className='app'>\n\t\t\t\n\t\t\t<div className='panel row top-bar'>\n\t\t\t\t<TimeController \n\t\t\t\t\tpassTime={passTime}\n\t\t\t\t\tsetOpenTimeout={setOpenTimeout}/>\n\t\t\t\t<TestSettingsController \n\t\t\t\t\tspawnPassenger={spawnPassenger}\n\t\t\t\t\ttoggleUsageSimulator={toggleUsageSimulator}\n\t\t\t\t\treset={reset}\n\t\t\t\t\tusageSimulatorIsEnabled={usageSimulatorIsEnabled}\n\t\t\t\t\televator={elevator}/>\n\t\t\t</div>\n\n\t\t\t<div className='row'>\n\t\t\t\t<FloorBank\n\t\t\t\t\tfloors={floors}\n\t\t\t\t\tcurrentFloor={currentFloor}\n\t\t\t\t\trequests={requests}\n\t\t\t\t\tdoorsOpen={doorsOpen}\n\t\t\t\t\trequestElevator={requestElevator}/>\n\t\t\t\t<ElevatorDisplay \n\t\t\t\t\tfloors={floors}\n\t\t\t\t\tdestinations={destinations}\n\t\t\t\t\taddDestination={addDestination}/>\n\t\t\t</div>\n\t\t\t<AboutDisplay/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const provideDispatcher = eventTypes => {\n\n\tconst listeners = {};\n\n\treturn eventTypes.reduce((dispatcher, eventType) => {\n\t\tlisteners[eventType] = [];\n\n\t\tdispatcher.on[eventType] = listener => {\n\t\t\tlisteners[eventType].push(listener);\n\n\t\t\treturn () => {\n\t\t\t\tlisteners[eventType] = listeners[eventType].filter(\n\t\t\t\t\tcurrent => current !== listener\n\t\t\t\t);\n\t\t\t};\n\t\t};\n\n\t\tdispatcher.dispatch[eventType] = (...params) => {\n\t\t\tlisteners[eventType].forEach(listener => listener(...params));\n\t\t};\n\n\t\treturn dispatcher;\n\n\t}, {dispatch: {}, on: {}});\n\n}\n\nexport default provideDispatcher;","const ELEVATOR_EVENTS = [\n\t'doorsOpen',\n\t'doorsChange',\n\t'floorChanges',\n\t'timePasses',\n\t'requestsChange',\n\t'destinationsChange',\n\t'reset',\n];\n\nexport default ELEVATOR_EVENTS;","import provideDispatcher from '../utils/dispatcher';\n\n//////////////// CONSTANTS\nimport {UP, DOWN} from '../constants/direction';\nimport {STOPPED, OPEN, MOVING} from '../constants/elevatorState';\nimport ELEVATOR_EVENTS from '../constants/elevatorEvents';\n//////////////// CONSTANTS // END\n\nconst provideElevator = (floorCount) => {\n\n\t//////////////// INTERNAL STATE\n\tlet elevatorState = STOPPED;\n\tlet currentFloor = 1;\n\tlet currentDirection = UP;\n\tlet destinations = [];\n\tlet requests = [];\n\tlet timestepsBetweenFloors = 0;\n\tlet openTimeout = 0;\n\tlet moveTime = 0;\n\tlet openTime = 0;\n\t///////////////// INTERNAL STATE // END\n\n\t///////////////// INTERNAL DERIVED STATE\n\tconst hasFloorToMoveTo = () => {\n\t\treturn !!(destinations.length + requests.length);\n\t};\n\n\tconst canChangeDirection = () => {\n\n\t\tconst filterFloorsAhead = floor => floor * currentDirection > currentFloor * currentDirection;\n\n\t\tconst destinationsAhead = destinations.filter(filterFloorsAhead);\n\n\t\tconst requestFloorsAhead = requests.map(\n\t\t\trequest => request.floor\n\t\t).filter(filterFloorsAhead);\n\n\t\treturn !(requestFloorsAhead.length + destinationsAhead.length);\n\t};\n\n\tconst shouldOpen = () => {\n\t\t\n\t\tif (destinationsAtCurrentFloor().length) return true;\n\n\t\tif (requestsAtCurrentFloor().length) {\n\t\t\tif (canChangeDirection()) return true;\n\t\t\tif (requestsAlsoMatchingCurrentDirection().length) return true;\n\t\t}\n\n\t\treturn false;\n\n\t};\n\n\tconst destinationsAtCurrentFloor = () => destinations.filter(\n\t\tdestination => destination === currentFloor\n\t);\n\n\tconst requestsAtCurrentFloor = () => requests.filter(\n\t\trequest => request.floor === currentFloor\n\t);\n\n\tconst requestsAlsoMatchingCurrentDirection =  () => requestsAtCurrentFloor().filter(\n\t\trequest => request.direction === currentDirection\n\t);\n\n\tconst isOpen = () => elevatorState === OPEN;\n\n\t///////////////// INTERNAL DERIVED STATE // END\n\n\n\t///////////////// ACTIONS\n\tconst reset = () => {\n\t\televatorState = STOPPED;\n\t\topenTime = 0;\n\t\tmoveTime = 0;\n\t\tcurrentFloor = 1;\n\t\tcurrentDirection = UP;\n\t\tdestinations = [];\n\t\trequests = [];\n\t\tdispatch.reset(\n\t\t\tcurrentFloor, \n\t\t\t[...destinations], \n\t\t\t[...requests], \n\t\t\tisOpen(),\n\t\t);\n\t}\n\n\tconst addDestination = floor => {\n\t\tdestinations.push(floor);\n\t\tif (elevatorState === OPEN) allowDoorsToClose();\n\t\tdispatch.destinationsChange([...destinations]);\n\t};\n\n\tconst requestElevator = (floor, direction) => {\n\t\trequests.push({floor, direction});\n\t\tdispatch.requestsChange([...requests]);\n\t}\n\n\tconst moveToNextFloor = () => {\n\t\tmoveTime = 0;\n\t\televatorState = MOVING;\n\t};\n\n\tconst closeDoors = () => {\n\t\televatorState = STOPPED;\n\t\tdispatch.doorsChange(isOpen());\n\t};\n\n\tconst stopElevator = () => elevatorState = STOPPED;\n\n\tconst openDoors = () => {\n\t\topenTime = 0;\n\n\t\tdestinations = destinations.filter(\n\t\t\tdestination => destination !== currentFloor\n\t\t);\n\n\t\tconst requestFilter = canChangeDirection()\n\t\t\t? request => request.floor !== currentFloor\n\t\t\t: request => request.floor !== currentFloor || request.direction !== currentDirection;\n\n\t\trequests = requests.filter(requestFilter);\n\n\t\televatorState = OPEN;\n\n\t\tdispatch.doorsOpen(currentFloor, currentDirection, canChangeDirection());\n\t\tdispatch.doorsChange(isOpen());\n\t\tdispatch.destinationsChange([...destinations]);\n\t\tdispatch.requestsChange([...requests]);\n\t};\n\n\tconst updateCurrentFloor = () => {\n\t\tcurrentFloor += currentDirection;\n\t\tdispatch.floorChanges(currentFloor);\n\t};\n\n\tconst updateCurrentDirection = () => {\n\t\tif (canChangeDirection()) {\n\t\t\tcurrentDirection *= DOWN;\n\t\t}\n\t};\n\n\tconst canDoorsClose = () => {\n\t\treturn openTime >= openTimeout;\n\t};\n\n\tconst allowDoorsToClose = () => {\n\t\tif (isOpen()) {\n\t\t\topenTime = openTimeout;\n\t\t}\n\t};\n\n\tconst setOpenTimeout = (value) => {\n\t\topenTimeout = value;\n\t}\n\n\tconst passTime = () => {\n\t\tswitch (elevatorState) {\n\t\t\tcase STOPPED:\n\t\t\t\tif (shouldOpen()) {\n\t\t\t\t\topenDoors();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (hasFloorToMoveTo()) {\n\t\t\t\t\tupdateCurrentDirection();\n\t\t\t\t\tmoveToNextFloor();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase OPEN:\n\t\t\t\tif (canDoorsClose()) {\n\t\t\t\t\tcloseDoors();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t++openTime;\n\t\t\t\tbreak;\n\n\t\t\tcase MOVING:\n\t\t\t\tif (moveTime >= timestepsBetweenFloors) {\n\t\t\t\t\tupdateCurrentFloor();\n\n\t\t\t\t\tif (shouldOpen()) {\n\t\t\t\t\t\tstopElevator();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmoveToNextFloor();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t++moveTime;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tdispatch.timePasses();\n\t};\n\n\t///////////////// DISPATCHER\n\tconst {dispatch, on} = provideDispatcher(ELEVATOR_EVENTS);\n\t///////////////// DISPATCHER // END\n\n\t///////////////// PUBLIC INTERFACE\n\treturn {\n\t\taddDestination,\n\t\trequestElevator,\n\t\tpassTime,\n\t\tsetOpenTimeout,\n\t\tallowDoorsToClose,\n\t\treset,\n\t\ton,\n\t};\n\t///////////////// PUBLIC INTERFACE // END\n\n}\n\nexport default provideElevator;","export const STOPPED = 0;\nexport const OPEN = 1;\nexport const MOVING = 2;","export const UP = 1;\nexport const DOWN = -1;","import {UP, DOWN} from '../constants/direction';\nimport provideDispatcher from '../utils/dispatcher'\n\nconst provideUsageSimulator = (elevator, floors) => {\n\n\tlet unsubscribeFromTimePasses;\n\tlet spawnChance = 0.16;\n\n\tconst toggle = () => {\n\n\t\tif (unsubscribeFromTimePasses) {\n\t\t\tunsubscribeFromTimePasses();\n\t\t\tunsubscribeFromTimePasses = undefined;\n\t\t\tdispatch.toggle(false);\n\t\t\treturn;\n\t\t}\n\n\t\tunsubscribeFromTimePasses = elevator.on.timePasses(passTime);\n\t\tdispatch.toggle(true);\n\n\t};\n\n\tconst spawn = () => {\n\t\t\n\t\tconst randomInteger = (min, max) => \n\t\t\tMath.round((max - min) * Math.random()) + min;\n\n\t\tconst randomFloor = () => randomInteger(\n\t\t\tfloors[0], \n\t\t\t+floors.slice(-1)\n\t\t);\n\n\t\tconst entering = 1;\n\t\tconst exiting = -1;\n\n\t\tlet origin = 0;\n\t\tlet destination = 0;\n\n\t\tswitch (randomInteger(entering, exiting)) {\n\t\t\tcase entering:\n\t\t\t\torigin = floors[0];\n\t\t\t\tdestination = randomFloor();\n\t\t\t\tbreak;\n\n\t\t\tcase exiting:\n\t\t\t\torigin = randomFloor();\n\t\t\t\tdestination = floors[0];\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\torigin = randomFloor();\n\t\t\t\tdestination = randomFloor();\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (origin === destination) return;\n\n\t\tconst direction = origin < destination ? UP : DOWN;\n\n\t\tlet destinationEntered = false;\n\n\t\tconst cancelListeners = () => {\n\t\t\tcancelResetListener();\n\t\t\tcancelDoorsOpenListener();\n\t\t}\n\n\t\tconst cancelResetListener = elevator.on.reset(cancelListeners);\n\n\t\tconst cancelDoorsOpenListener = elevator.on.doorsOpen((floor, elevatorDirection, canChangeDirection) => {\n\t\t\tif (!destinationEntered && floor === origin) {\n\t\t\t\tif (canChangeDirection || elevatorDirection === direction) {\n\t\t\t\t\televator.addDestination(destination);\t\t\n\t\t\t\t\tdestinationEntered = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (destinationEntered && floor === destination) {\n\t\t\t\televator.allowDoorsToClose();\n\t\t\t\tcancelListeners();\n\t\t\t}\n\t\t});\n\n\t\televator.requestElevator(origin, direction);\n\t\t\n\t}\n\n\tconst passTime = () => {\n\n\t\tif (Math.random() < spawnChance) {\n\t\t\tspawn();\n\t\t}\n\n\t};\n\n\tconst {dispatch, on} = provideDispatcher(['toggle']);\n\n\treturn {\n\t\ttoggle,\n\t\tspawn,\n\t\ton,\n\t};\n\n}\n\nexport default provideUsageSimulator;","import {useState} from 'react';\n\nconst useForceUpdate = () => {\n\tconst [, update] = useState();\n\treturn () => update({});\n}\n\nexport default useForceUpdate;","import {useState} from 'react';\nimport useForceUpdate from './useForceUpdate';\n\nlet states = [];\n\nconst useAsyncState = (initial) => {\n\n\tconst forceUpdate = useForceUpdate();\n\tconst [id] = useState(states.length);\n\t\n\tlet state = states[id];\n\tif (!state) {\n\t\tstate = {value: initial};\n\t\tstates.push(state);\n\t}\n\n\tconst updateValue = (value) => {\n\t\tif (value !== state.value) {\n\t\t\tstate.value = value;\n\t\t\tforceUpdate();\n\t\t}\n\t};\n\n\treturn [state, updateValue];\n}\n\nexport default useAsyncState;","import React, {useEffect} from 'react';\nimport cx from 'classnames';\nimport useAsyncState from '../hooks/useAsyncState';\n\nconst AUTOPLAY_INTERVALS = [800, 140];\nconst AUTOPLAY_OPEN_TIMEOUT = 5;\n\nconst TimeController = ({passTime, setOpenTimeout}) => {\n\n\tconst [asyncAutoplay, setAutoplay] = useAsyncState(true);\n\tconst [asyncAutoplaySpeed, setAutoplaySpeed] = useAsyncState(0);\n\n\tuseEffect(() => {\n\t\tif (asyncAutoplay.value) startAutoplay();\n\t}, []);\n\n\tconst applySingleTimestep = () => {\n\t\tsetAutoplay(false);\n\t\tpassTime();\n\t}\n\n\tconst handleAutoplayButtonClick = () => {\n\t\tif (asyncAutoplay.value) {\n\t\t\tchangePlaySpeed();\n\t\t\treturn;\n\t\t}\n\n\t\tstartAutoplay();\n\t}\n\n\tconst changePlaySpeed = () => {\n\t\tsetAutoplaySpeed((asyncAutoplaySpeed.value + 1) % AUTOPLAY_INTERVALS.length);\n\t};\n\n\tconst startAutoplay = () => {\n\t\tsetAutoplay(true);\n\t\tsetOpenTimeout(AUTOPLAY_OPEN_TIMEOUT);\n\t\tsetTimeout(applyAutoplayTimestep);\n\t}\n\n\tconst applyAutoplayTimestep = () => {\n\t\tif (asyncAutoplay.value) {\n\t\t\tpassTime();\n\t\t\tsetTimeout(\n\t\t\t\tapplyAutoplayTimestep, \n\t\t\t\tAUTOPLAY_INTERVALS[asyncAutoplaySpeed.value]\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpenTimeout(0);\n\t}\n\n\treturn (\n\t\t<div className='row'>\n\t\t\t<button \n\t\t\t\tchildren='|>'\n\t\t\t\tonClick={applySingleTimestep}/>\n\n\t\t\t<button \n\t\t\t\tchildren={asyncAutoplaySpeed.value ? '>>' : '>'}\n\t\t\t\tclassName={cx(asyncAutoplay.value && 'toggled')}\n\t\t\t\tonClick={handleAutoplayButtonClick}/>\n\t\t</div>\n\t);\n};\n\nexport default TimeController;","import React from 'react';\nimport cx from 'classnames';\n\nconst TestSettingsController = ({spawnPassenger, toggleUsageSimulator, reset, usageSimulatorIsEnabled}) => {\n\n\treturn (\n\t\t<div className='row'>\n\t\t\t<button \n\t\t\t\tonClick={spawnPassenger}\n\t\t\t\tchildren='Random passenger'/>\n\t\t\t<button \n\t\t\t\tclassName={cx(usageSimulatorIsEnabled && 'toggled')}\n\t\t\t\tonClick={toggleUsageSimulator}\n\t\t\t\tchildren='Simulate usage'/>\n\n\t\t\t<button \n\t\t\t\tonClick={reset}\n\t\t\t\tchildren='x'/>\n\t\t</div>\n\t);\n};\n\nexport default TestSettingsController;","import React from 'react';\nimport cx from 'classnames';\nimport {DOWN, UP} from '../constants/direction';\n\nconst FloorDisplay = ({floor, floors, isCurrentFloor, elevatorDoorsOpen, requests, requestElevator}) => {\n\n\tconst isUpRequested = !!requests.find(request => request.direction === UP);\n\tconst isDownRequested = !!requests.find(request => request.direction === DOWN);\n\n\tconst isTopFloor = floor === +floors.slice(-1);\n\tconst isBottomFloor = floor === floors[0];\n\n\treturn (\n\t\t<div className={cx('row', 'floor-display', isCurrentFloor && 'highlight')}>\n\t\t\t\n\t\t\t<div>Floor {floor}</div>\n\t\t\t\n\t\t\t<button \n\t\t\t\tclassName={cx(isDownRequested && 'toggled')}\n\t\t\t\tonClick={() => requestElevator(floor, DOWN)}\n\t\t\t\tdisabled={isBottomFloor}\n\t\t\t\tchildren='Down'/>\n\t\t\t\n\t\t\t<button \n\t\t\t\tclassName={cx(isUpRequested && 'toggled')}\n\t\t\t\tonClick={() => requestElevator(floor, UP)}\n\t\t\t\tdisabled={isTopFloor}\n\t\t\t\tchildren='Up'/>\n\n\t\t\t<div \n\t\t\t\tclassName={cx(elevatorDoorsOpen && isCurrentFloor \n\t\t\t\t\t? 'highlight2' \n\t\t\t\t\t: 'hidden'\n\t\t\t\t)}\n\t\t\t\tchildren='Open'/>\n\n\t\t</div>\n\t);\n};\n\nexport default FloorDisplay;","import React from 'react';\nimport FloorDisplay from './FloorDisplay';\n\nconst FloorBank = ({floors, currentFloor, requests, doorsOpen, requestElevator}) => {\n\n\treturn (\n\t\t<div className='floor-bank panel'>\n\t\t\t{floors.map(floor =>\n\t\t\t\t<FloorDisplay \n\t\t\t\t\tfloor={floor}\n\t\t\t\t\tfloors={floors}\n\t\t\t\t\tisCurrentFloor={floor === currentFloor}\n\t\t\t\t\televatorDoorsOpen={doorsOpen}\n\t\t\t\t\trequests={requests.filter(request => request.floor === floor)}\n\t\t\t\t\trequestElevator={requestElevator}\n\t\t\t\t\tkey={floor}/>\n\t\t\t)}\n\t\t</div>\n\t);\n\n}\n\nexport default FloorBank;","import React from 'react';\nimport cx from 'classnames';\n\nconst ElevatorDisplay = ({floors, destinations, addDestination}) => {\n\n\tconst isDestination = floor => \n\t\t!!destinations.find(destination => destination === floor);\n\n\treturn (\n\t\t<div className='elevator-display'>\n\t\t\t{floors.map((floor) =>\n\t\t\t\t<button\n\t\t\t\t\tchildren={floor}\n\t\t\t\t\tkey={floor}\n\t\t\t\t\tclassName={\n\t\t\t\t\t\tcx(isDestination(floor) && 'toggled')\n\t\t\t\t\t}\n\t\t\t\t\tonClick={() => addDestination(floor)}/>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default ElevatorDisplay;","import React from 'react';\n\nconst AboutDisplay = () => {\n\treturn (\n\t\t<div className='panel'>\n\t\t\tA bried exlanation of the UI.\n\n\t\t\t<h3>Top bar</h3>\n\t\t\t<p>From left to right</p>\n\t\t\t<p>\n\t\t\t\t<b>Step by step mode: </b> Clicking this button will enter step by step mode.\n\t\t\t\tThis means the elevator will only run one cycle of its state machine with each \n\t\t\t\tclick on this button.  This can be useful for watching what the elevator does \n\t\t\t\tunder certain situations.\n\t\t\t</p>\n\n\t\t\t<p>\n\t\t\t\t<b>Play/Fast Forward: </b> This button will exit step by step mode, and subsequent \n\t\t\t\tclicks will cycle between fast and regular play speeds.\n\t\t\t</p>\n\n\t\t\t<p>\n\t\t\t\t<b>Random Passenger: </b> When you want to add a passenger to the simulation pushing \n\t\t\t\tthis button will do so.\n\t\t\t</p>\n\n\t\t\t<p>\n\t\t\t\t<b>Simulate usage: </b> This will periodically add random passengers to the simulation\n\t\t\t\tat random intervals.  Handy for seeing how the elevator will behave under normal circumstances.\n\t\t\t\tClicking again will disable this feature.\n\t\t\t</p>\n\n\t\t\t<p>\n\t\t\t\t<b>Reset: </b> If you want to put the elevator back into its initial state click this button.\n\t\t\t\tThis is useful when you want to run specific test.  This button will not reset the play settings\n\t\t\t\tso you may want to make sure you enter step by step mode, and disabled usage simulation before\n\t\t\t\tresetting.\n\t\t\t</p>\n\n\t\t\t<h3>Left section</h3>\n\t\t\t<p>\n\t\t\t\tThis section is broken up into floors.\n\t\t\t\tPressing any up or down button will summon the elevator to that floor.\n\t\t\t\tWhen a floor is highlighted it means the elevator is at the floor.\n\t\t\t\tYou will also see the word open when the elevator doors are open on that floor.\n\t\t\t</p>\n\n\t\t\t<h3>Right section</h3>\n\t\t\t<p>\n\t\t\t\tThis represents the options available to a passenger inside the elevator.\n\t\t\t\tPressing any of the numbered buttons will inform the elevator that you want\n\t\t\t\tto travel to that level.\n\t\t\t</p>\n\t\t</div>\n\t);\n}\n\nexport default AboutDisplay;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}