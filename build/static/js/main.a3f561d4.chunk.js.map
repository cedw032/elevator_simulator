{"version":3,"sources":["hooks/useAsyncState.js","models/elevator.js","constants/elevatorState.js","constants/direction.js","components/TimeController.js","hooks/useForceUpdate.js","hooks/useForceUpdateOnEvents.js","components/FloorDisplay.js","components/ElevatorDisplay.js","App.js","serviceWorker.js","index.js"],"names":["state","provideElevator","floorCount","elevatorState","openTime","moveTime","currentFloor","destinations","requests","openTimeout","floors","i","push","floorToMoveTo","length","floor","shouldOpen","destinationsAtCurrentFloor","requestsAtCurrentFloor","currentDirection","requestsAlsoMatchingCurrentDirection","filter","destination","request","direction","moveToNextFloor","closeDoors","dispatchDoorsClose","floorChangeListeners","doorsOpenListeners","doorsCloseListeners","dispatchFloorChange","forEach","listener","dispatchDoorsOpen","addDestination","requestElevator","elapseTime","requestFilter","openDoors","setOpenTimeout","value","concat","isOpen","isDestination","isRequested","onFloorChange","onDoorsOpen","onDoorsClose","useAsyncState","initial","_useState","useState","_useState2","Object","slicedToArray","setState","TimeController","_ref","elevator","_useAsyncState","_useAsyncState2","asyncAutoplay","setAutoplay","useEffect","startAutoplay","setTimeout","applyAutoplayTimestep","react_default","a","createElement","className","children","onClick","cx","useForceUpdate","update","useForceUpdateOnEvents","subscribes","forceUpdate","subscribe","FloorDisplay","ElevatorDisplay","map","key","App","components_TimeController","components_FloorDisplay","components_ElevatorDisplay","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3f561d4.chunk.js","sourcesContent":["import {useState} from 'react';\n\nlet state;\n\nconst useAsyncState = (initial) => {\n\n\tif (!state) state = {value: initial};\n\n\tconst [o, setState] = useState();\n\n\tconst updateValue = (value) => {\n\t\tif (value !== state.value) {\n\t\t\tstate.value = value;\n\t\t\tsetState({});\n\t\t}\n\t};\n\n\treturn [state, updateValue];\n}\n\nexport default useAsyncState;","//////////////// CONSTANTS\nimport {UP, DOWN, NONE} from '../constants/direction';\nimport {STOPPED, OPEN, MOVING} from '../constants/elevatorState';\n//////////////// CONSTANTS // END\n\nconst provideElevator = (floorCount) => {\n\n\t//////////////// INTERNAL STATE\n\tlet elevatorState = STOPPED;\n\tlet openTime = 0;\n\tlet moveTime = 0;\n\tlet currentFloor = 1;\n\tlet destinations = [];\n\tlet requests = [];\n\n\tlet openTimeout = 1;\n\n\tconst floors = [];\n\tfor (let i = 1; i <= floorCount; ++i) floors.push(i);\n\t///////////////// INTERNAL STATE // END\n\n\t///////////////// INTERNAL DERIVED STATE\n\tconst floorToMoveTo = () => {\n\t\tif (destinations.length) return destinations[0];\n\t\tif (requests.length) return requests[0].floor;\n\t\treturn undefined;\n\t};\n\n\tconst shouldOpen = () => {\n\t\t\n\t\tif (destinationsAtCurrentFloor().length) return true;\n\n\t\tif (requestsAtCurrentFloor().length) {\n\t\t\tif (currentDirection() == NONE) return true;\n\t\t\tif (requestsAlsoMatchingCurrentDirection().length) return true;\n\t\t}\n\n\t\treturn false;\n\n\t};\n\n\tconst destinationsAtCurrentFloor = () => destinations.filter(\n\t\tdestination => destination == currentFloor\n\t);\n\n\tconst requestsAtCurrentFloor = () => requests.filter(\n\t\trequest => request.floor == currentFloor\n\t);\n\n\tconst requestsAlsoMatchingCurrentDirection =  () => requestsAtCurrentFloor().filter(\n\t\trequest => request.direction == currentDirection()\n\t);\n\n\tconst currentDirection = () => {\n\t\tif (floorToMoveTo() > currentFloor) return UP;\n\t\tif (floorToMoveTo() < currentFloor) return DOWN;\n\t\treturn NONE;\n\t};\n\t///////////////// INTERNAL DERIVED STATE // END\n\n\n\t///////////////// ACTIONS\n\tconst addDestination = floor => {\n\t\tdestinations.push(floor);\n\t\tif (elevatorState == OPEN) closeDoors();\n\t};\n\n\tconst requestElevator = (floor, direction) => requests.push({floor, direction})\n\n\tconst moveToNextFloor = () => {\n\t\tmoveTime = 0;\n\t\televatorState = MOVING;\n\t};\n\n\tconst closeDoors = () => {\n\t\televatorState = STOPPED;\n\t\tdispatchDoorsClose();\n\t};\n\n\tconst stopElevator = () => elevatorState = STOPPED;\n\n\tconst openDoors = () => {\n\t\topenTime = 0;\n\n\t\tdestinations = destinations.filter(\n\t\t\tdestination => destination != currentFloor\n\t\t);\n\n\t\tconst requestFilter = currentDirection() == NONE\n\t\t\t? request => request.floor != currentFloor\n\t\t\t: request => request.floor != currentFloor || request.direction != currentDirection();\n\n\t\trequests = requests.filter(requestFilter);\n\n\t\televatorState = OPEN;\n\t\tdispatchDoorsOpen();\n\t};\n\n\tconst updateCurrentFloor = () => {\n\t\tif (currentDirection() == UP) {\n\t\t\t++currentFloor;\n\t\t\tdispatchFloorChange();\n\t\t\treturn;\n\t\t}\n\n\t\tif (currentDirection() == DOWN) {\n\t\t\t--currentFloor;\n\t\t\tdispatchFloorChange();\n\t\t\treturn;\n\t\t}\n\t};\n\n\tconst elapseTime = () => {\n\t\tswitch (elevatorState) {\n\t\t\tcase STOPPED:\n\t\t\t\tif (shouldOpen()) {\n\t\t\t\t\topenDoors();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (floorToMoveTo()) {\n\t\t\t\t\tmoveToNextFloor();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn;\n\n\t\t\tcase OPEN:\n\t\t\t\tif (openTime >= openTimeout) {\n\t\t\t\t\tcloseDoors();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t++openTime;\n\t\t\t\treturn;\n\n\t\t\tcase MOVING:\n\t\t\t\tif (moveTime) {\n\t\t\t\t\tupdateCurrentFloor();\n\n\t\t\t\t\tif (shouldOpen()) {\n\t\t\t\t\t\tstopElevator();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tmoveToNextFloor();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t++moveTime;\n\t\t\t\treturn;\n\t\t}\n\t};\n\n\t///////////////// LISTENERS\n\tconst floorChangeListeners = [];\n\tconst doorsOpenListeners = [];\n\tconst doorsCloseListeners = [];\n\t///////////////// LISTENERS // END\n\n\t///////////////// DISPATCHERS\n\tconst dispatchFloorChange = () => {\n\t\tfloorChangeListeners.forEach(listener => listener());\n\t};\n\n\tconst dispatchDoorsOpen = () => {\n\t\tdoorsOpenListeners.forEach(listener => listener());\n\t};\n\n\tconst dispatchDoorsClose = () => {\n\t\tdoorsCloseListeners.forEach(listener => listener());\n\t};\n\t///////////////// DISPATCHERS // END\n\n\t///////////////// PUBLIC INTERFACE\n\treturn {\n\t\taddDestination,\n\t\trequestElevator,\n\t\telapseTime,\n\n\t\tsetOpenTimeout: value => openTimeout = value,\n\n\t\tcurrentFloor: () => currentFloor,\n\t\tfloors: () => [...floors],\n\t\tisOpen: () => elevatorState == OPEN,\n\n\t\tisDestination: floor => destinations.filter(\n\t\t\tdestination => destination == floor\n\t\t).length != 0,\n\n\t\tisRequested: (floor, direction) => requests.filter(\n\t\t\trequest => request.floor == floor && request.direction == direction\n\t\t).length != 0,\n\n\t\tonFloorChange: listener => floorChangeListeners.push(listener),\n\t\tonDoorsOpen: listener => doorsOpenListeners.push(listener),\n\t\tonDoorsClose: listener => doorsCloseListeners.push(listener),\n\n\t};\n\t///////////////// PUBLIC INTERFACE // END\n\n}\n\nexport default provideElevator;","export const STOPPED = 0;\nexport const OPEN = 1;\nexport const MOVING = 2;","export const UP = 1;\nexport const DOWN = -1;\nexport const NONE = 0;","import React, {useState, useEffect} from 'react';\nimport cx from 'classnames';\nimport useAsyncState from '../hooks/useAsyncState';\n\nconst AUTOPLAY_INTERVAL = 200;\nconst AUTOPLAY_OPEN_TIMEOUT = 30;\n\nconst TimeController = ({elevator}) => {\n\n\tconst [asyncAutoplay, setAutoplay] = useAsyncState(true);\n\n\tuseEffect(() => {\n\t\tif (asyncAutoplay.value) startAutoplay();\n\t}, []);\n\n\tconst applySingleTimestep = () => {\n\t\tsetAutoplay(false);\n\t\televator.elapseTime();\n\t}\n\n\tconst startAutoplay = () => {\n\t\tsetAutoplay(true);\n\t\televator.setOpenTimeout(AUTOPLAY_OPEN_TIMEOUT);\n\t\tsetTimeout(applyAutoplayTimestep);\n\t}\n\n\tconst applyAutoplayTimestep = () => {\n\t\tif (asyncAutoplay.value) {\n\t\t\televator.elapseTime();\n\t\t\tsetTimeout(applyAutoplayTimestep, AUTOPLAY_INTERVAL);\n\t\t\treturn;\n\t\t}\n\n\t\televator.setOpenTimeout(1);\n\t}\n\n\treturn (\n\t\t<div className='row'>\n\t\t\t<button \n\t\t\t\tchildren='|>'\n\t\t\t\tonClick={applySingleTimestep}/>\n\n\t\t\t<button \n\t\t\t\tchildren='>>'\n\t\t\t\tclassName={cx(asyncAutoplay.value && 'toggled')}\n\t\t\t\tonClick={startAutoplay}/>\n\t\t</div>\n\t);\n};\n\nexport default TimeController;","import {useState} from 'react';\n\nconst useForceUpdate = () => {\n\tconst [o, update] = useState();\n\treturn () => update({});\n}\n\nexport default useForceUpdate;","import {useEffect} from 'react';\nimport useForceUpdate from './useForceUpdate';\n\nconst useForceUpdateOnEvents = (subscribes) => {\n\tconst forceUpdate = useForceUpdate();\n\tuseEffect(() => {\n\t\tsubscribes.forEach(subscribe => subscribe(forceUpdate));\n\t}, []);\n}\n\nexport default useForceUpdateOnEvents;","import React, {useEffect} from 'react';\nimport cx from 'classnames';\nimport {DOWN, UP} from '../constants/direction';\nimport useForceUpdate from '../hooks/useForceUpdate';\nimport useForceUpdateOnEvents from '../hooks/useForceUpdateOnEvents';\n\nconst FloorDisplay = ({floor, elevator}) => {\n\n\tconst forceUpdate = useForceUpdate();\n\tuseForceUpdateOnEvents([\n\t\televator.onFloorChange,\n\t\televator.onDoorsOpen,\n\t\televator.onDoorsClose,\n\t]);\n\n\tconst isDoorOpen = () => elevator.currentFloor() == floor && elevator.isOpen()\n\n\tconst isAtThisFloor = () => elevator.currentFloor() == floor;\n\n\tconst isRequested = direction => elevator.isRequested(floor, direction)\n\n\tconst requestElevator = direction => () => {\n\t\televator.requestElevator(floor, direction);\n\t\tforceUpdate();\n\t}\n\n\treturn (\n\t\t<div className='row'>\n\t\t\t<div className={cx(isAtThisFloor() && 'highlight')}>\n\t\t\t\tFloor {floor}\n\t\t\t</div>\n\t\t\t\n\t\t\t<button \n\t\t\t\tclassName={cx(isRequested(DOWN) && 'toggled')}\n\t\t\t\tonClick={requestElevator(DOWN)}\n\t\t\t\tchildren='Down'/>\n\t\t\t\n\t\t\t<button \n\t\t\t\tclassName={cx(isRequested(UP) && 'toggled')}\n\t\t\t\tonClick={requestElevator(UP)}\n\t\t\t\tchildren='Up'/>\n\t\t\t\n\t\t\t{isDoorOpen()\n\t\t\t\t? <div className='highlight2'>Open</div>\n\t\t\t\t: <div>Closed</div>\n\t\t\t}\n\t\t</div>\n\t);\n};\n\nexport default FloorDisplay;","import React, {useEffect} from 'react';\nimport cx from 'classnames';\nimport {DOWN, UP} from '../constants/direction';\nimport useForceUpdate from '../hooks/useForceUpdate';\nimport useForceUpdateOnEvents from '../hooks/useForceUpdateOnEvents';\n\nconst ElevatorDisplay = ({elevator}) => {\n\n\tconst forceUpdate = useForceUpdate();\n\tuseForceUpdateOnEvents([elevator.onDoorsOpen]);\n\n\treturn (\n\t\t<div className='elevator-display'>\n\t\t\t{elevator.floors().map((floor) =>\n\t\t\t\t<button\n\t\t\t\t\tchildren={floor}\n\t\t\t\t\tkey={floor}\n\t\t\t\t\tclassName={\n\t\t\t\t\t\tcx(elevator.isDestination(floor) && 'toggled')\n\t\t\t\t\t}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\televator.addDestination(floor);\n\t\t\t\t\t\tforceUpdate();\n\t\t\t\t\t}}/>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default ElevatorDisplay;","import React, {useState} from 'react';\nimport './App.css';\nimport provideElevator from './models/elevator';\nimport TimeController from './components/TimeController'\nimport FloorDisplay from './components/FloorDisplay';\nimport ElevatorDisplay from './components/ElevatorDisplay';\n\nconst FLOOR_COUNT = 10;\n\nconst elevator = provideElevator(FLOOR_COUNT);\n\nfunction App() {\n\n\treturn (\n\t\t<div className='app'>\n\t\t\t\n\t\t\t<TimeController elevator={elevator}/>\n\n\t\t\t<div className='row'>\n\t\t\t\t<div className='floor-bank'>\n\t\t\t\t\t{elevator.floors().map(floor =>\n\t\t\t\t\t\t<FloorDisplay \n\t\t\t\t\t\t\tfloor={floor}\n\t\t\t\t\t\t\televator={elevator}\n\t\t\t\t\t\t\tkey={floor}/>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<ElevatorDisplay elevator={elevator}/>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}