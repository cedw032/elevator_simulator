{"version":3,"sources":["App.js","utils/dispatcher.js","models/clock.js","constants/elevatorEvents.js","models/elevator.js","constants/elevatorState.js","constants/direction.js","models/usageSimulator.js","components/Button.js","components/TimeController.js","components/TestSettingsController.js","components/FloorDisplay.js","components/FloorBank.js","components/ElevatorDisplay.js","components/AboutDisplay.js","index.js"],"names":["provideDispatcher","eventTypes","listeners","reduce","dispatcher","eventType","on","listener","push","filter","current","dispatch","_len","arguments","length","params","Array","_key","forEach","apply","provideClock","timeout","interval","paused","passTime","timePasses","setPaused","value","pausedChanges","_provideDispatcher","play","run","setTimeout","pause","clearTimeout","setPlayInterval","ELEVATOR_EVENTS","provideElevator","floorCount","elevatorState","currentFloor","currentDirection","destinations","requests","openTimeout","moveTime","openTime","canChangeDirection","filterFloorsAhead","floor","destinationsAhead","map","request","shouldOpen","destinationsAtCurrentFloor","requestsAtCurrentFloor","requestsAlsoMatchingCurrentDirection","destination","direction","isOpen","isOpenAtFloor","moveToNextFloor","allowDoorsToClose","addDestination","destinationsChange","Object","toConsumableArray","requestElevator","cannotAcceptRequest","requestsChange","requestFilter","doorsOpen","doorsChange","openDoors","floorChanges","concat","setOpenTimeout","reset","provideUsageSimulator","elevator","floors","unsubscribeFromTimePasses","spawn","randomInteger","min","max","Math","round","random","randomFloor","slice","origin","destinationEntered","cancelListeners","cancelResetListener","cancelDoorsOpenListener","elevatorDirection","toggle","undefined","Button","props","_useState","useState","_useState2","slicedToArray","clicked","setClicked","react_default","a","createElement","assign","onClick","e","className","cx","PLAY_INTERVALS","TimeController","setQuickAnimations","playIntervalIndex","setPlayIntervalIndex","useEffect","components_Button","children","newIndex","changePlaySpeed","TestSettingsController","_ref","spawnPassenger","toggleUsageSimulator","usageSimulatorIsEnabled","FloorDisplay","isCurrentFloor","elevatorDoorsOpen","isUpRequested","find","isDownRequested","hereAndOpen","hereAndNotOpen","isTopFloor","isBottomFloor","disabled","FloorBank","components_FloorDisplay","key","ElevatorDisplay","isDestination","AboutDisplay","clock","i","usageSimulator","App","_useState3","_useState4","setCurrentFloor","_useState5","_useState6","setDestinations","_useState7","_useState8","setRequests","_useState9","_useState10","setDoorsOpen","_useState11","_useState12","setusageSimulatorIsEnabled","_useState13","_useState14","quickAnimations","cancellers","canceller","components_TimeController","components_TestSettingsController","components_FloorBank","components_ElevatorDisplay","components_AboutDisplay","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.3f2c60f7.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport cx from 'classnames';\nimport './App.css';\n\nimport provideClock from './models/clock';\nimport provideElevator from './models/elevator';\nimport provideUsageSimulator from './models/usageSimulator';\n\nimport TimeController from './components/TimeController'\nimport TestSettingsController from './components/TestSettingsController'\nimport FloorBank from './components/FloorBank';\nimport ElevatorDisplay from './components/ElevatorDisplay';\nimport AboutDisplay from './components/AboutDisplay';\n\nconst FLOOR_COUNT = 10;\n\nconst clock = provideClock();\nconst elevator = provideElevator(FLOOR_COUNT);\n\nconst floors = [];\nfor (let i = 1; i <= FLOOR_COUNT; ++i) floors.push(i);\n\nconst usageSimulator = provideUsageSimulator(elevator, floors);;\n\nfunction App() {\n\n\tconst [paused, setPaused] = useState(false);\n\n\n\tconst [currentFloor, setCurrentFloor] = useState(0);\n\tconst [destinations, setDestinations] = useState([]);\n\tconst [requests, setRequests] = useState([]);\n\tconst [doorsOpen, setDoorsOpen] = useState(false);\n\tconst [usageSimulatorIsEnabled, setusageSimulatorIsEnabled] = useState(false);\n\tconst [quickAnimations, setQuickAnimations] = useState(false);\n\n\tuseEffect(() => {\n\n\t\tconst cancellers = [];\n\n\t\tcancellers.push(clock.on.timePasses(elevator.passTime));\n\n\t\tcancellers.push(clock.on.pausedChanges(setPaused));\n\n\t\tcancellers.push(elevator.on.floorChanges(setCurrentFloor));\n\t\tcancellers.push(elevator.on.destinationsChange(setDestinations));\n\t\tcancellers.push(elevator.on.requestsChange(setRequests));\n\t\tcancellers.push(elevator.on.doorsChange(setDoorsOpen));\n\n\t\tcancellers.push(\n\t\t\televator.on.reset((currentFloor, destinations, requests, doorsOpen) => {\n\t\t\t\tsetCurrentFloor(currentFloor);\n\t\t\t\tsetDestinations(destinations);\n\t\t\t\tsetRequests(requests);\n\t\t\t\tsetDoorsOpen(doorsOpen);\n\t\t\t})\n\t\t);\n\n\t\tcancellers.push(usageSimulator.on.toggle(setusageSimulatorIsEnabled));\n\n\t\televator.reset();\n\t\tusageSimulator.toggle();\n\t\tclock.play();\n\n\t\treturn () => cancellers.forEach(canceller => canceller())\n\n\t},[]);\n\n\tconst {\n\t\tplay,\n\t\tpause,\n\t\tpassTime,\n\t\tsetPlayInterval,\n\t} = clock;\n\n\tconst {\n\t\taddDestination,\n\t\trequestElevator,\n\t\treset,\n\t\tsetOpenTimeout\n\t} = elevator;\n\n\tconst {\n\t\tspawn: spawnPassenger,\n\t\ttoggle: toggleUsageSimulator,\n\t} = usageSimulator;\n\n\treturn (\n\t\t<div className={cx('app', quickAnimations && 'quick-animations')}>\n\t\t\t\n\t\t\t<div className='panel row top-bar'>\n\t\t\t\t<TimeController \n\t\t\t\t\tpassTime={passTime}\n\t\t\t\t\tpaused={paused}\n\t\t\t\t\tplay={play}\n\t\t\t\t\tpause={pause}\n\t\t\t\t\tsetPlayInterval={setPlayInterval}\n\t\t\t\t\tsetOpenTimeout={setOpenTimeout}\n\t\t\t\t\tsetQuickAnimations={setQuickAnimations}/>\n\t\t\t\t<TestSettingsController \n\t\t\t\t\tspawnPassenger={spawnPassenger}\n\t\t\t\t\ttoggleUsageSimulator={toggleUsageSimulator}\n\t\t\t\t\treset={reset}\n\t\t\t\t\tusageSimulatorIsEnabled={usageSimulatorIsEnabled}\n\t\t\t\t\televator={elevator}/>\n\t\t\t</div>\n\n\t\t\t<div className='row'>\n\t\t\t\t<FloorBank\n\t\t\t\t\tfloors={floors}\n\t\t\t\t\tcurrentFloor={currentFloor}\n\t\t\t\t\trequests={requests}\n\t\t\t\t\tdoorsOpen={doorsOpen}\n\t\t\t\t\trequestElevator={requestElevator}/>\n\t\t\t\t<ElevatorDisplay \n\t\t\t\t\tfloors={floors}\n\t\t\t\t\tdestinations={destinations}\n\t\t\t\t\taddDestination={addDestination}/>\n\t\t\t</div>\n\t\t\t<AboutDisplay/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const provideDispatcher = eventTypes => {\n\n\tconst listeners = {};\n\n\treturn eventTypes.reduce((dispatcher, eventType) => {\n\t\tlisteners[eventType] = [];\n\n\t\tdispatcher.on[eventType] = listener => {\n\t\t\tlisteners[eventType].push(listener);\n\n\t\t\treturn () => {\n\t\t\t\tlisteners[eventType] = listeners[eventType].filter(\n\t\t\t\t\tcurrent => current !== listener\n\t\t\t\t);\n\t\t\t};\n\t\t};\n\n\t\tdispatcher.dispatch[eventType] = (...params) => {\n\t\t\tlisteners[eventType].forEach(listener => listener(...params));\n\t\t};\n\n\t\treturn dispatcher;\n\n\t}, {dispatch: {}, on: {}});\n\n}\n\nexport default provideDispatcher;","import provideDispatcher from '../utils/dispatcher';\n\nconst provideClock = () => {\n\n\tlet interval = 0;\n\tlet paused = true;\n\tlet timeout;\n\t\n\tconst run = () => {\n\t\tpassTime();\n\t\ttimeout = setTimeout(run, interval);\n\t}\n\n\tconst passTime = () => {\n\t\tdispatch.timePasses();\n\t};\n\n\tconst setPaused = value => {\n\t\tpaused = value;\n\t\tdispatch.pausedChanges(paused);\n\t}\n\n\tconst {dispatch, on} = provideDispatcher([\n\t\t'timePasses',\n\t\t'pausedChanges'\n\t]);\n\n\treturn {\n\n\t\tpaused: () => paused,\n\n\t\tplay: () => {\n\t\t\tif (!paused) return;\n\t\t\trun();\n\t\t\tsetPaused(false);\n\t\t},\n\n\t\tpause: () => {\n\t\t\tif (paused) return;\n\t\t\tclearTimeout(timeout);\n\t\t\tsetPaused(true);\n\t\t},\n\n\t\tpassTime,\n\n\t\tsetPlayInterval: value => interval = value,\n\n\t\ton,\n\t}\n\n\n\n}\n\nexport default provideClock;","const ELEVATOR_EVENTS = [\n\t'doorsOpen',\n\t'doorsChange',\n\t'floorChanges',\n\t'timePasses',\n\t'requestsChange',\n\t'destinationsChange',\n\t'reset',\n];\n\nexport default ELEVATOR_EVENTS;","import provideDispatcher from '../utils/dispatcher';\n\n//////////////// CONSTANTS\nimport {UP, DOWN} from '../constants/direction';\nimport {STOPPED, OPEN, MOVING} from '../constants/elevatorState';\nimport ELEVATOR_EVENTS from '../constants/elevatorEvents';\n//////////////// CONSTANTS // END\n\nconst provideElevator = (floorCount) => {\n\n\t//////////////// INTERNAL STATE\n\tlet elevatorState = STOPPED;\n\tlet currentFloor = 1;\n\tlet currentDirection = UP;\n\tlet destinations = [];\n\tlet requests = [];\n\tlet timestepsBetweenFloors = 0;\n\tlet openTimeout = 0;\n\tlet moveTime = 0;\n\tlet openTime = 0;\n\t///////////////// INTERNAL STATE // END\n\n\t///////////////// INTERNAL DERIVED STATE\n\tconst hasFloorToMoveTo = () => {\n\t\treturn !!(destinations.length + requests.length);\n\t};\n\n\tconst canChangeDirection = () => {\n\n\t\tconst filterFloorsAhead = floor => floor * currentDirection > currentFloor * currentDirection;\n\n\t\tconst destinationsAhead = destinations.filter(filterFloorsAhead);\n\n\t\tconst requestFloorsAhead = requests.map(\n\t\t\trequest => request.floor\n\t\t).filter(filterFloorsAhead);\n\n\t\treturn !(requestFloorsAhead.length + destinationsAhead.length);\n\t};\n\n\tconst cannotAcceptRequest = (floor, direction) => {\n\t\treturn isOpenAtFloor(floor) \n\t\t\t&& (canChangeDirection() || currentDirection === direction);\n\t};\n\n\tconst shouldOpen = () => {\n\t\t\n\t\tif (destinationsAtCurrentFloor().length) return true;\n\n\t\tif (requestsAtCurrentFloor().length) {\n\t\t\tif (canChangeDirection()) return true;\n\t\t\tif (requestsAlsoMatchingCurrentDirection().length) return true;\n\t\t}\n\n\t\treturn false;\n\n\t};\n\n\tconst destinationsAtCurrentFloor = () => destinations.filter(\n\t\tdestination => destination === currentFloor\n\t);\n\n\tconst requestsAtCurrentFloor = () => requests.filter(\n\t\trequest => request.floor === currentFloor\n\t);\n\n\tconst requestsAlsoMatchingCurrentDirection =  () => requestsAtCurrentFloor().filter(\n\t\trequest => request.direction === currentDirection\n\t);\n\n\tconst isOpen = () => elevatorState === OPEN;\n\tconst isOpenAtFloor = floor => floor == currentFloor && isOpen();\n\n\t///////////////// INTERNAL DERIVED STATE // END\n\n\n\t///////////////// ACTIONS\n\tconst reset = () => {\n\t\televatorState = STOPPED;\n\t\topenTime = 0;\n\t\tmoveTime = 0;\n\t\tcurrentFloor = 1;\n\t\tcurrentDirection = UP;\n\t\tdestinations = [];\n\t\trequests = [];\n\t\tdispatch.reset(\n\t\t\tcurrentFloor, \n\t\t\t[...destinations], \n\t\t\t[...requests], \n\t\t\tisOpen(),\n\t\t);\n\t};\n\n\tconst addDestination = floor => {\n\n\t\tif (isOpenAtFloor(floor)) {\n\t\t\topenTime = 0;\n\t\t\treturn;\n\t\t}\n\n\t\tdestinations.push(floor);\n\t\tif (elevatorState === OPEN) allowDoorsToClose();\n\t\tdispatch.destinationsChange([...destinations]);\n\t};\n\n\tconst requestElevator = (floor, direction) => {\n\t\t\n\t\tif (cannotAcceptRequest(floor, direction)) {\n\t\t\topenTime = 0;\n\t\t\treturn;\t\n\t\t}\n\n\t\trequests.push({floor, direction});\n\t\tdispatch.requestsChange([...requests]);\n\t}\n\n\tconst moveToNextFloor = () => {\n\t\tmoveTime = 0;\n\t\televatorState = MOVING;\n\t};\n\n\tconst closeDoors = () => {\n\t\televatorState = STOPPED;\n\t\tdispatch.doorsChange(isOpen());\n\t};\n\n\tconst stopElevator = () => elevatorState = STOPPED;\n\n\tconst openDoors = () => {\n\t\topenTime = 0;\n\n\t\tdestinations = destinations.filter(\n\t\t\tdestination => destination !== currentFloor\n\t\t);\n\n\t\tconst requestFilter = canChangeDirection()\n\t\t\t? request => request.floor !== currentFloor\n\t\t\t: request => request.floor !== currentFloor || request.direction !== currentDirection;\n\n\t\trequests = requests.filter(requestFilter);\n\n\t\televatorState = OPEN;\n\n\t\tdispatch.doorsOpen(currentFloor, currentDirection, canChangeDirection());\n\t\tdispatch.doorsChange(isOpen());\n\t\tdispatch.destinationsChange([...destinations]);\n\t\tdispatch.requestsChange([...requests]);\n\t};\n\n\tconst updateCurrentFloor = () => {\n\t\tcurrentFloor += currentDirection;\n\t\tdispatch.floorChanges(currentFloor);\n\t};\n\n\tconst updateCurrentDirection = () => {\n\t\tif (canChangeDirection()) {\n\t\t\tcurrentDirection *= DOWN;\n\t\t}\n\t};\n\n\tconst canDoorsClose = () => {\n\t\treturn openTime >= openTimeout;\n\t};\n\n\tconst allowDoorsToClose = () => {\n\t\tif (isOpen()) {\n\t\t\topenTime = openTimeout;\n\t\t}\n\t};\n\n\tconst setOpenTimeout = (value) => {\n\t\topenTimeout = value;\n\t}\n\n\tconst passTime = () => {\n\t\tswitch (elevatorState) {\n\t\t\tcase STOPPED:\n\t\t\t\tif (shouldOpen()) {\n\t\t\t\t\topenDoors();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (hasFloorToMoveTo()) {\n\t\t\t\t\tupdateCurrentDirection();\n\t\t\t\t\tmoveToNextFloor();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase OPEN:\n\t\t\t\tif (canDoorsClose()) {\n\t\t\t\t\tcloseDoors();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t++openTime;\n\t\t\t\tbreak;\n\n\t\t\tcase MOVING:\n\t\t\t\tif (moveTime >= timestepsBetweenFloors) {\n\t\t\t\t\tupdateCurrentFloor();\n\n\t\t\t\t\tif (shouldOpen()) {\n\t\t\t\t\t\tstopElevator();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmoveToNextFloor();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t++moveTime;\n\t\t\t\tbreak;\n\n\t\t\tdefault: throw `unhandled elevator state ${elevatorState}`;\n\t\t}\n\n\t\tdispatch.timePasses();\n\t};\n\n\t///////////////// DISPATCHER\n\tconst {dispatch, on} = provideDispatcher(ELEVATOR_EVENTS);\n\t///////////////// DISPATCHER // END\n\n\t///////////////// PUBLIC INTERFACE\n\treturn {\n\t\taddDestination,\n\t\trequestElevator,\n\t\tpassTime,\n\t\tsetOpenTimeout,\n\t\tallowDoorsToClose,\n\t\treset,\n\t\ton,\n\t};\n\t///////////////// PUBLIC INTERFACE // END\n\n}\n\nexport default provideElevator;","export const STOPPED = 0;\nexport const OPEN = 1;\nexport const MOVING = 2;","export const UP = 1;\nexport const DOWN = -1;","import {UP, DOWN} from '../constants/direction';\nimport provideDispatcher from '../utils/dispatcher'\n\nconst provideUsageSimulator = (elevator, floors) => {\n\n\tlet unsubscribeFromTimePasses;\n\tlet spawnChance = 0.16;\n\n\tconst toggle = () => {\n\n\t\tif (unsubscribeFromTimePasses) {\n\t\t\tunsubscribeFromTimePasses();\n\t\t\tunsubscribeFromTimePasses = undefined;\n\t\t\tdispatch.toggle(false);\n\t\t\treturn;\n\t\t}\n\n\t\tunsubscribeFromTimePasses = elevator.on.timePasses(passTime);\n\t\tdispatch.toggle(true);\n\n\t};\n\n\tconst spawn = () => {\n\t\t\n\t\tconst randomInteger = (min, max) => \n\t\t\tMath.round((max - min) * Math.random()) + min;\n\n\t\tconst randomFloor = () => randomInteger(\n\t\t\tfloors[0], \n\t\t\t+floors.slice(-1)\n\t\t);\n\n\t\tconst entering = 1;\n\t\tconst exiting = -1;\n\n\t\tlet origin = 0;\n\t\tlet destination = 0;\n\n\t\tswitch (randomInteger(entering, exiting)) {\n\t\t\tcase entering:\n\t\t\t\torigin = floors[0];\n\t\t\t\tdestination = randomFloor();\n\t\t\t\tbreak;\n\n\t\t\tcase exiting:\n\t\t\t\torigin = randomFloor();\n\t\t\t\tdestination = floors[0];\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\torigin = randomFloor();\n\t\t\t\tdestination = randomFloor();\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (origin === destination) return;\n\n\t\tconst direction = origin < destination ? UP : DOWN;\n\n\t\tlet destinationEntered = false;\n\n\t\tconst cancelListeners = () => {\n\t\t\tcancelResetListener();\n\t\t\tcancelDoorsOpenListener();\n\t\t}\n\n\t\tconst cancelResetListener = elevator.on.reset(cancelListeners);\n\n\t\tconst cancelDoorsOpenListener = elevator.on.doorsOpen((floor, elevatorDirection, canChangeDirection) => {\n\t\t\tif (!destinationEntered && floor === origin) {\n\t\t\t\tif (canChangeDirection || elevatorDirection === direction) {\n\t\t\t\t\televator.addDestination(destination);\t\t\n\t\t\t\t\tdestinationEntered = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (destinationEntered && floor === destination) {\n\t\t\t\televator.allowDoorsToClose();\n\t\t\t\tcancelListeners();\n\t\t\t}\n\t\t});\n\n\t\televator.requestElevator(origin, direction);\n\t\t\n\t}\n\n\tconst passTime = () => {\n\n\t\tif (Math.random() < spawnChance) {\n\t\t\tspawn();\n\t\t}\n\n\t};\n\n\tconst {dispatch, on} = provideDispatcher(['toggle']);\n\n\treturn {\n\t\ttoggle,\n\t\tspawn,\n\t\ton,\n\t};\n\n}\n\nexport default provideUsageSimulator;","import React, {useState} from 'react';\nimport cx from 'classnames';\n\nconst Button = (props) => {\n\tconst [clicked, setClicked] = useState(false);\n\n\tconst clickDuration = 140;\n\n\treturn (\n\n\t\t<button {...props}\n\t\t\tonClick={(e) => {\n\t\t\t\tif (props.onClick) props.onClick();\n\n\t\t\t\tif (clicked) clearTimeout(clicked);\n\n\t\t\t\tsetClicked(setTimeout(() => {\n\t\t\t\t\tsetClicked(false);\n\t\t\t\t}, clickDuration));\n\t\t\t}}\n\t\t\tclassName={cx(\n\t\t\t\tprops.className,\n\t\t\t\tclicked && 'clicked'\n\t\t\t)}/>\n\t);\n};\n\nexport default Button;\n\n","import React, {useState, useEffect} from 'react';\nimport cx from 'classnames';\nimport Button from './Button';\n\nconst PLAY_INTERVALS = [800, 140];\nconst AUTOPLAY_OPEN_TIMEOUT = 5;\n\nconst TimeController = (props) => {\n\n\tconst {\n\t\tpassTime, \n\t\tpaused,\n\t\tplay, \n\t\tpause, \n\t\tsetPlayInterval, \n\t\tsetOpenTimeout, \n\t\tsetQuickAnimations\n\t} = props;\n\n\tconst [playIntervalIndex, setPlayIntervalIndex] = useState(0);\n\n\tuseEffect(() => {\n\t\tsetPlayInterval(PLAY_INTERVALS[playIntervalIndex]);\n\t}, []);\n\n\tconst changePlaySpeed = () => {\n\t\tconst newIndex = (playIntervalIndex + 1) % PLAY_INTERVALS.length;\n\t\tsetPlayInterval(PLAY_INTERVALS[newIndex]);\n\t\tsetPlayIntervalIndex(newIndex);\n\t};\n\n\tconst startPlaying = () => {\n\t\tsetOpenTimeout(AUTOPLAY_OPEN_TIMEOUT);\n\t\tplay();\n\t}\n\n\tconst stopPlaying = () => {\n\t\tsetOpenTimeout(0);\n\t\tpause();\n\t}\n\n\treturn (\n\t\t<div className='row'>\n\t\t\t<Button \n\t\t\t\tchildren={paused ? '|>' : '||'}\n\t\t\t\tonClick={() => {\n\t\t\t\t\tif (paused) {\n\t\t\t\t\t\tpassTime();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tstopPlaying();\n\t\t\t\t}}/>\n\n\t\t\t<Button \n\t\t\t\tchildren={playIntervalIndex ? '>>' : '>'}\n\t\t\t\tclassName={cx(!paused && 'toggled')}\n\t\t\t\tonClick={() => {\n\t\t\t\t\tif (!paused) {\n\t\t\t\t\t\tchangePlaySpeed();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tstartPlaying();\n\t\t\t\t}}/>\n\t\t</div>\n\t);\n};\n\nexport default TimeController;","import React from 'react';\nimport cx from 'classnames';\nimport Button from './Button';\n\nconst TestSettingsController = ({spawnPassenger, toggleUsageSimulator, reset, usageSimulatorIsEnabled}) => {\n\n\treturn (\n\t\t<div className='row'>\n\t\t\t<Button \n\t\t\t\tonClick={spawnPassenger}\n\t\t\t\tchildren='Random passenger'/>\n\t\t\t<Button \n\t\t\t\tclassName={cx(usageSimulatorIsEnabled && 'toggled')}\n\t\t\t\tonClick={toggleUsageSimulator}\n\t\t\t\tchildren='Simulate usage'/>\n\n\t\t\t<Button \n\t\t\t\tonClick={reset}\n\t\t\t\tchildren='x'/>\n\t\t</div>\n\t);\n};\n\nexport default TestSettingsController;","import React from 'react';\nimport cx from 'classnames';\nimport {DOWN, UP} from '../constants/direction';\nimport Button from './Button';\n\nconst FloorDisplay = ({floor, floors, isCurrentFloor, elevatorDoorsOpen, requests, requestElevator}) => {\n\n\tconst isUpRequested = !!requests.find(request => request.direction === UP);\n\tconst isDownRequested = !!requests.find(request => request.direction === DOWN);\n\n\tconst hereAndOpen = isCurrentFloor && elevatorDoorsOpen;\n\tconst hereAndNotOpen = isCurrentFloor && !elevatorDoorsOpen;\n\n\tconst isTopFloor = floor === +floors.slice(-1);\n\tconst isBottomFloor = floor === floors[0];\n\n\treturn (\n\t\t<div className={cx('row', 'floor-display', isCurrentFloor && 'highlight')}>\n\t\t\t\n\t\t\t<div>Floor {floor}</div>\n\t\t\t\n\t\t\t<Button \n\t\t\t\tclassName={cx(isDownRequested && 'toggled')}\n\t\t\t\tonClick={() => requestElevator(floor, DOWN)}\n\t\t\t\tdisabled={isBottomFloor}\n\t\t\t\tchildren='Down'/>\n\t\t\t\n\t\t\t<Button \n\t\t\t\tclassName={cx(isUpRequested && 'toggled')}\n\t\t\t\tonClick={() => requestElevator(floor, UP)}\n\t\t\t\tdisabled={isTopFloor}\n\t\t\t\tchildren='Up'/>\n\n\t\t\t<div\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'floor-door-state',\n\t\t\t\t\thereAndNotOpen && 'yellow',\n\t\t\t\t\thereAndOpen && 'white',\n\t\t\t\t\t!isCurrentFloor && 'hidden' \n\t\t\t\t)}\n\t\t\t\tchildren={hereAndOpen ? '|__|' : '_||_' }/>\n\n\t\t</div>\n\t);\n};\n\nexport default FloorDisplay;","import React from 'react';\nimport FloorDisplay from './FloorDisplay';\n\nconst FloorBank = ({floors, currentFloor, requests, doorsOpen, requestElevator}) => {\n\n\treturn (\n\t\t<div className='floor-bank panel'>\n\t\t\t{floors.map(floor =>\n\t\t\t\t<FloorDisplay \n\t\t\t\t\tfloor={floor}\n\t\t\t\t\tfloors={floors}\n\t\t\t\t\tisCurrentFloor={floor === currentFloor}\n\t\t\t\t\televatorDoorsOpen={doorsOpen}\n\t\t\t\t\trequests={requests.filter(request => request.floor === floor)}\n\t\t\t\t\trequestElevator={requestElevator}\n\t\t\t\t\tkey={floor}/>\n\t\t\t)}\n\t\t</div>\n\t);\n\n}\n\nexport default FloorBank;","import React from 'react';\nimport cx from 'classnames';\nimport Button from './Button'\n\nconst ElevatorDisplay = ({floors, destinations, addDestination}) => {\n\n\tconst isDestination = floor => \n\t\t!!destinations.find(destination => destination === floor);\n\n\treturn (\n\t\t<div className='elevator-display'>\n\t\t\t{floors.map((floor) =>\n\t\t\t\t<Button\n\t\t\t\t\tchildren={floor}\n\t\t\t\t\tkey={floor}\n\t\t\t\t\tclassName={\n\t\t\t\t\t\tcx(isDestination(floor) && 'toggled')\n\t\t\t\t\t}\n\t\t\t\t\tonClick={() => addDestination(floor)}/>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default ElevatorDisplay;","import React from 'react';\n\nconst AboutDisplay = () => {\n\treturn (\n\t\t<div className='panel'>\n\t\t\t<h4>A brief explanation of the UI</h4>\n\n\t\t\t<div className='panel'>\n\t\t\t\t<h3>Top bar</h3>\n\t\t\t\t<p>From left to right</p>\n\t\t\t\t<p>\n\t\t\t\t\t<b>Pause/Step: </b> Clicking this button will pause the simulation.\n\t\t\t\t\tWith each click after the first the simulation will execute one frame.  \n\t\t\t\t\tThis can be useful for watching what the elevator does under \n\t\t\t\t\tcertain circumstances.\n\t\t\t\t</p>\n\n\t\t\t\t<p>\n\t\t\t\t\t<b>Play/Fast Forward: </b> This button will unpause the simulation, \n\t\t\t\t\tand subsequent clicks will cycle between fast and regular play speeds.\n\t\t\t\t</p>\n\n\t\t\t\t<p>\n\t\t\t\t\t<b>Random Passenger: </b> When you want to add a passenger to the simulation pushing \n\t\t\t\t\tthis button will do so.\n\t\t\t\t</p>\n\n\t\t\t\t<p>\n\t\t\t\t\t<b>Simulate usage: </b> This will periodically add random passengers to the simulation\n\t\t\t\t\tat random intervals.  Handy for seeing how the elevator will behave under normal circumstances.\n\t\t\t\t\tClicking again will disable this feature.\n\t\t\t\t</p>\n\n\t\t\t\t<p>\n\t\t\t\t\t<b>Reset: </b> If you want to put the elevator back into its initial state click this button.\n\t\t\t\t\tThis is useful when you want to run specific test.  This button will not reset the play settings\n\t\t\t\t\tso you may want to make sure you enter step by step mode, and disabled usage simulation before\n\t\t\t\t\tresetting.\n\t\t\t\t</p>\n\t\t\t</div>\n\n\t\t\t<div className='panel'>\n\t\t\t\t<h3>Left section</h3>\n\t\t\t\t<p>\n\t\t\t\t\tThis section is broken up into floors.\n\t\t\t\t\tPressing any up or down button will summon the elevator to that floor.\n\t\t\t\t\tIt also show the current floor of the elevator, and when the doors are open.\n\t\t\t\t</p>\n\t\t\t</div>\n\n\t\t\t<div className='panel'>\n\t\t\t\t<h3>Right section</h3>\n\t\t\t\t<p>\n\t\t\t\t\tThis represents the options available to a passenger inside the elevator.\n\t\t\t\t\tPressing any of the numbered buttons will inform the elevator that you want\n\t\t\t\t\tto travel to that level.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default AboutDisplay;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}